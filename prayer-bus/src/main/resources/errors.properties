#####################################################################################################
##  1.System Error Message Definition
#####################################################################################################
##  1.1.Base: com.prayer.exception.AbstractSchemaException -- From 10001
E10001=Required attribute [{0}] missed in json node ( Object ).
E10002=Json data type (Array / Object) of attribute [{0}] is wrong, please check attribute json type.
E10003=The value of attribute [{0}] is [{1}], it does not match the pattern [{2}].
E10004=Optional attribute [{0}] "{1} !!!" in json node ( Object ).
E10005=Attribute [{0}] must{3} be in the value collection of ({1}), but now the value is [{2}].
E10006=There is no json node under current array node [{0}], the array length is 0 (Zero).
E10007=There exist duplicated attribute [{0}] in current json node.
E10008=There exist duplicated column [{0}] in the table of database.
E10009=There must be only one primary key definition in current database table.
E10010=The primary key missed in definition of table [{0}] in database.
E10011=The primary key policy [{0}] definition of database table [{1}] is not matching schema specification.
E10012=The policy [{0}] and field data type [{1}] are not matching, they are conflict.
E10013=The sub-table definition is conflict and it''s not matching.
E10014=The foreign key [{0}] data type is [{1}], it could not be used in Foreign Key definition.
E10015=The foreign key''s column type [{0}] is wrong, please check the definition of FK.
E10016=If there exist foreign key, it must be only one definition in current database table.
E10017=The attribute [{0}] is not supported by schema definition, please remove it.
E10018=The key [{0}] appears in schema definition more than once, they are duplicated.
E10019=The key name [{0}] is invalid for category [{1}], you must comply with "PREFIX" rules: "UK_" for UniqueKey, "FK_" for ForeignKey, "PK_" for PrimaryKey.
E10020=The attribute [{0}] and [{1}] refer to same value and they are conflicts.
E10021=When attribute "multi = true", this key mustn''t be ForeignKey, the definition of key [{0}] is conflict with this rule.
E10022=The json node "__meta__" PK policy [{0}] definition must match attribute multi=[{1}], "multi=true" for [COLLECTION], "multi=false" for [GUID,INCREMENT,ASSIGNED].
E10023=The column [{0}] of "columns" attribute of keys [{1}] missed the definition in "__fields__" json node definition.
E10024=The attribute [{0}] = [{1}] occurs must appear [{2}] times in "__fields__" definition with category = [{4}], but now it occurs [{3}] times with wrong.
E10025=The "policy" is not COLLECTION, primary key attribute "unique" of [{0}] must not be false.
E10026=The attribute "nullable" of primary key [{0}] must be false.
##  1.2.Base: com.prayer.exception.AbstractMetadataException -- From 11001
E11001=The column [{0}] of table [{1}] could not be changed into "NOT NULL" because it contains ''null'' value.
E11002=Please do not add "NOT NULL" new column [{0}] into table [{1}] because it contains data.
E11003=The field [{0}] of model [{1}] does not exist, please verify your field name and correct it.
E11004=The expression of [{0}] is invalid, it''s type is [{1}], when you use "AND,OR", you mustn''t pass "LeafNode" into projection.
E11005=The policy [{0}] is conflict with method calling, please check your policy data of record.
E11006=The result rows of [{0}] must be only one, but now database return to more than one rows.
E11007=The primary key [{0}] value is missing in record of [{1}], please correct primary key value first.
E11008=The parameter {0} key-value pair of [{1}] is not valid primary key-value pair, please be sure you have passed primary key-value pair.
E11009=The process of SQL execution met errors, please check details in log or enable DEBUG mode.
E11010=The column [{0}] of table [{1}] in database does not exist, please verify your column name and correct it.
E11011=The content must be format of [{0}], but now the value format is invalid with [{1}].
E11012=The value is type of [{0}], attribute [{1}] could not be validated. 

##  1.3.Base: com.prayer.exception.AbstractSystemException -- From 20001 ( Not needed for new category of these kind of errors )
E20001=The member [{0}] could not be initialized with input value [{1}].
E20002=IO error happened, please check input file path [{0}].
E20003=The json content [{0}] could not be parsed, please provide valid json format value.
E20004=There are some error when deserialize/serializing json node "{0}", please contact administrator.
E20005=There exist error when loading schema data (Process="{0}") into H2 meta database, please contact administrator.
E20006=The schema with identifier [{0}] does not exist in H2 metadata database.
E20007=There are some errors occured when you remove the schema with identifier [{0}] from H2 metadata database.

##  1.4.Base: com.prayer.exception.AbstractMetadataException -- From 12001 For Validator only
E12001=The value "{0}" of this field [{1}] does not match defined pattern "{2}". ( StringType | XmlType | JsonType | ScriptType )
E12002=The attribute "nullable" of field [{0}] is defined to "false", this value could not be null, empty or blank string.
E12003=The {0} length of field [{1}] is defined to "{2}", current value's length is "{3}" and it's not in the length range. ( StringType | XmlType | JsonType | ScriptType )
E12004=The {0} value of field [{1}] is defined to "{2}", current value is "{3}" and it's not in the range. ( IntType | LongType )
E12005=The field {0} defined length={1} and precision={2}, current value is "{3}" and it's wrong precision. ( DecimalType )
E12006=There exist custom error in validator: {0}, please check details.

##  1.5.Base: com.prayer.exception.AbstractVertXException -- From 15001 For Vertx only
E15001=There are some errors occured when accessing (INSERT, UPDATE, DELETE) metadata (H2) database (Process="{0}").  
E15002=Verticle Class (name="{0}") could not be found in current environment, please contact administrator.
E15003=Verticle Class (name="{0}") is not valid Verticle (Vert.X), please check verticle definition.

#####################################################################################################
##  2.System Debug Information Definition
#####################################################################################################
##  2.1.Common Debug
D10000.FIDX=Node: __fields__ ==> Idx=[{0}], Name = "{1}".
D10000.FTIDX=Node: __fields__ ==> Idx=[{0}], Name = "{1}", Type = "{2}".
D10000.KIDX=Node: __keys__ ==> Idx=[{0}], Name = "{1}".
D10000.FKIDX=Node: __fields__ ( foreignkey = true ) ==> Idx=[{0}], Name = "{1}".

##  2.2.Schema Validation Debug Information
D10001=Required / Location: JsonNode = "{0}", Attribute = "{1}".
D10002.ARR=Array / Location: JsonNode = "{0}", Attribute = "{1}".
D10002.OBJ=Object / Location: JsonNode = "{0}", Attribute = "{1}".
D10002.EOBJ=Array Element -> Object / Location: Idx=[{2}], JsonNode = "{0}", Value = "{1}".
D10002.ESTR=Array Element -> String / Location: Idx=[{2}], JsonNode = "{0}", Value = "{1}".
D10003=Patterns / Location: JsonNode = "{0}", Attribute = "{1}", Value = "{2}", Pattern = "{3}".
D10003.IDX=Patterns / Location: Idx=[{4}], JsonNode = "{0}", Attribute = "{1}", Value = "{2}", Pattern = "{3}".
D10004.MIS=Missing / Location: JsonNode = "{0}", Attribute = "{1}".
D10004.EXT=Existing / Location: JsonNode = "{0}", Attribute = "{1}".
D10005.IN=Value In / Location: JsonNode = "{0}", Attribute = "{1}", Expected values = [{2}].
D10005.NIN=Value Not In / Location: JsonNode = "{0}", Attribute = "{1}", Unexpected values = [{2}].
D10006=Zero Length / Location: JsonNode = "{0}", Length is 0 (Zero).
D10007=Attribute Duplicated / Location: JsonNode = "{0}", Attribute = "{1}".
D10008=Column Duplicated / Location: JsonNode = "{0}", Attribute = "{1}".
D10009=Primary Key Redundancy / Location: JsonNode = "__keys__/__fields__", Key Category = "{0}", Occurs = "{1}".
D10010=Primary Key Missing / Location: JsonNode = "{0}", Attribute = "{1}", Value = "{2}", Occurs = "{3}", Min Occurs = "{4}".
D10011.NCO=Non Collection PK Policy / Location: JsonNode = "{0}", Attribute = "{1}", Policy = "{2}", Table = "{3}", Occurs="{4}".
D10011.CO=Collection PK Policy / Location: JsonNode = "{0}", Attribute = "{1}", Policy = "{2}", Table = "{3}", Occurs="{4}".
D10012=PK Policy / Location: Idx=[{5}], JsonNode = "{0}", Attribute = "{1}", Value = "{2}", Policy = "{3}", Expected values=[{4}].
D10013=Relation Missing / Location: JsonNode = "{0}", Attribute = "{1}", Value = "{2}", Occurs = "{3}", Min Occurs = "{4}".
D10014=Foreign Key DataType / Location: Idx=[{4}], JsonNode = "{0}", Attribute = "{1}", Type = "{2}", Expected values = [{3}].
D10015=Foreign Key ColumnType / Location: Idx=[{4}], JsonNode = "{0}", Attribute = "{1}", Value = "{2}", Pattern = "{3}".
D10016=Foreign Key Redundancy / Location: JsonNode = "__keys__/__fields__", Key Category = "{0}", Occurs = "{1}".
D10017=Not Supported / Location: JsonNode = "{0}", Unsupported Attributes = [{1}].
D10018=Keys Duplicated / Location: JsonNode = "{0}", Attribute = "{1}".
D10019=Keys Name Specification / Location: Idx=[{2}], JsonNode = "__keys__", Name = "{0}", Category = "{1}".
D10020=Not Same / Location: JsonNode = "{0}", Attr1: {1}="{2}", Attr2: {3}="{4}".
D10021=Foreign Key Policy / Location: Idx=[{3}], JsonNode = "__keys__", Attribute = "{0}", IsMulti = "{1}", Category = "{2}".
D10022=Primary Key / Location: Idx=[{2}], JsonNode = "__keys__/__meta__", Policy = "{0}", Is Multi = "{1}". 
D10023=Column Missing / Location: Idx = [{3}], JsonNode = "__fields__", Key Name = "{0}", Column = "{1}", Expected Occurs > 0, Occurs = "{2}".
D10024=Wrong Time Appears / Location: JsonNode = "__fields__", Pair => {0} = "{1}", Category = "{2}", Expected Occurs ( Column Size ) = "{3}", Actual Occurs = "{4}".
D10025=Unique False in PK (Policy is not "COLLECTION") / Location: Idx=[{2}], JsonNode = "__fields__", Name = "{0}", Unique = "{1}".
D10026=Nullable True in PK / Location: Idx=[{2}], JsonNode = "__fields__", Name = "{0}", Nullable = "{1}".

D20006=Schema of identifier "{0}" does not exist in H2 database.

##  2.3.System Information Debug For Non-Error Code
SYS.KIT.IO.PARAM=[D] ==> ( FileName = "{0}", Class = "{1}" ) Input parameter reading...
SYS.KIT.IO.CP=[D] <== ( FileName = "{0}", Value -> "{1}" ) Read from clazz.getResourceAsStream(filename).
SYS.KIT.IO.LOADER=[D] <== ( FileName = "{0}", Value -> "{1}" ) Read from Thread.currentThread().getContextClassLoader().getResourceAsStream(filename).
SYS.KIT.IO.FILE=[D] <== ( FileName = "{0}", Value -> "{1}" ) Read from FileInputStream(file).
SYS.KIT.IO.ERR.FILE=[E] ~!!~ ( File -> "{0}" ) File does not exist or IO error!
SYS.NULL=[E] ~!!~ Variable "{0}" is null: Value = "{1}".
SYS.KIT.PROP=[D] <== ( prop = "{0}", hashCode = "{1}" ) Initialized current prop!
SYS.KIT.OBJ.JDK=[D] <== ( instance="{0}", hashCode="{1}" ) "{2}" -> JDK reflection create instance.
SYS.KIT.OBJ.ASM=[D] <== ( instance="{0}", hashCode="{1}" ) "{2}" -> ASM reflection create instance.

##  2.4.JVM Error
JVM.IO=[E] ~JVM!!~ Construct Error! Input = "{0}".
JVM.SQL=[E] SQLException occurs, Exception Location : Method="{0}".
JVM.ENCODING=[E]~JVM!!~ Unsupported Encoding Method! Input = "{0}";